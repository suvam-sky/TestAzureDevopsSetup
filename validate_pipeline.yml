# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none 


# resources:
#  repositories:
#    - repository: testAzureDevopsSetup
#      type: git
#      name : testAzureDevopsSetup

# parameters:
#   env: $(environmentName)
#   tokenName: $(environmentName)Token.json
#   runTestClasses: $(runTestClasses)


jobs:
- deployment: Validate
  displayName: Validate
  pool:
    vmImage: ubuntu-latest
  environment: $(environmentName)
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true
          fetchDepth: full
        - task: NodeTool@0 
          inputs:
            versionSpec: '16.x'
        - task: DownloadSecureFile@1
          name: SalesforceToken
          displayName: 'Download auth file for SFDX'
          inputs:
            secureFile: $(environmentName)
        - script: |
            echo "*******SOURCE_BRANCH_NAME****************"
            sourceBranch=$(echo "$SOURCE_BRANCH" | sed 's|refs/heads/||g')
            echo "##vso[task.setvariable variable=sourceBranch;]$sourceBranch"
            echo "SOURCE_BRANCH_NAME: $sourceBranch"
            echo "********************************"
            latestBuildCommit=$(git rev-list --all --max-parents=0)
            echo "##vso[task.setvariable variable=latestBuildCommit]$latestBuildCommit"
          displayName: "Download latest build commit for environment"
          env:
              SOURCE_BRANCH: $(System.PullRequest.SourceBranch)
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        - script: |
            if ! command -v sfdx &> /dev/null
              then
                  echo "SFDX Not found, installing..."
                  npm install -g sfdx-cli
                  echo y | sfdx plugins:install sfdx-git-delta
                  echo y | sfdx plugins:install @salesforce/sfdx-scanner
              else
                  echo "SFDX installed."
            fi
          displayName: "Install SFDX and SDG"
        - script: |
            sfdx auth:sfdxurl:store -f $(SalesforceToken.secureFilePath) -a $(environmentName)
          displayName: "Salesforce Login"
        - script: |
            sfdx sgd:source:delta -a 58 --to HEAD --from origin/develop -o .
            mv package/package.xml manifest/package.xml
            echo "*********PACKAGE.XML******************"
            cat manifest/package.xml
            echo "**************************************"
          displayName: "Create a Manifest"
        - script: |
            sfdx force:source:deploy  -x manifest/package.xml --checkonly --targetusername $(environmentName)
          displayName: "Validate code"
           
        - script: |
            sfdx scanner:run --target "./force-app/" --pmdconfig "./devops/ruleset/apex-ruleset.xml" -f junit -o TEST-$(Build.BuildNumber).xml
          displayName: "Run SF Scanner"
          condition: succeededOrFailed()
        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/TEST-$(Build.BuildNumber).xml'