trigger: none
pr: none
parameters:
- name: folderName
  displayName: "enter folder names to deploy/validate e.g force-app/main  force-app/hepdevam"
  type: string
  default: " "
- name: dryRun
  displayName: "Dry Run - Enable to run Validation only"
  type: boolean
  default: "true"
- name: runTestClasses
  displayName: "Run Test Classes"
  type: boolean
  default: "False"


jobs:
- deployment: Validate
  displayName: Validate
  pool:
    vmImage: ubuntu-latest
  environment: $(environmentName)
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true
          fetchDepth: full
        - task: NodeTool@0 
          inputs:
            versionSpec: '16.x'
        - task: DownloadSecureFile@1
          name: SalesforceToken
          displayName: 'Download auth file for SFDX'
          inputs:
            secureFile: $(environmentName)Token.json
        - script: |
            echo "*******SOURCE_BRANCH_NAME****************"
            sourceBranch=$(echo $(Build.SourceBranch) | sed 's|refs/heads/||g')
            echo "##vso[task.setvariable variable=sourceBranch;]$sourceBranch"
            echo "SOURCE_BRANCH_NAME: $sourceBranch"
            echo "********************************"
            latestBuildCommit=$(git rev-list --all --max-parents=0)
            echo "##vso[task.setvariable variable=latestBuildCommit]$latestBuildCommit"
          displayName: "Download latest build commit for environment"
          env:
              SOURCE_BRANCH: $(System.PullRequest.SourceBranch)
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        - script: |
            if ! command -v sfdx &> /dev/null
              then
                  echo "SFDX Not found, installing..."
                  npm install -g sfdx-cli
              else
                  echo "SFDX installed."
            fi
          displayName: "Install SFDX and SDG"
        - script: |
            sfdx auth:sfdxurl:store -f $(SalesforceToken.secureFilePath) -a $(environmentName)
          displayName: "Salesforce Login"

        - script: |
            echo "Build parameters for SFDX call"
            SFDX_ARGS=""
              if [ ${{ parameters.runTestClasses }} = "True" ]; then
                SFDX_ARGS+=" -l RunLocalTests"
              fi
              if [ ${{ parameters.dryRun }} = "True" ]; then
                SFDX_ARGS+=" --dry-run"
              fi
            echo "Additional args concatenated: ${SFDX_ARGS}"

            sfdx project deploy start --source-dir ${{ parameters.folderName }} --target-org $(environmentName) ${SFDX_ARGS} --verbose
          displayName: "Validate code"